// This is your Prisma schema file
// Multi-tenant ARC platform schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============ PROGRAMS ============
model Program {
  id            String    @id @default(cuid())
  handle        String    @unique // subdomain handle (e.g., "gameface" for gameface.perk.ooo)
  name          String
  perkProgramId String    @unique // ID in Perk system
  apiKey        String    // Encrypted Perk API key
  
  // Branding
  branding      Json      @default("{}") // JSON blob with colors, fonts, logo URL
  customDomain  String?   // Future: custom domain support
  
  // Settings
  isActive      Boolean   @default(true)
  settings      Json      @default("{}")
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  activities    Activity[]
  sessions      Session[]
  analytics     Analytics[]
  usage         ProgramUsage[]
  
  @@index([handle])
  @@index([perkProgramId])
}

// ============ ACTIVITIES ============
model Activity {
  id            String    @id @default(cuid())
  programId     String
  program       Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  
  // Basic info
  type          ActivityType
  slug          String    // URL slug (e.g., "quiz-grooming-101")
  title         String
  description   String?
  
  // Configuration
  config        Json      // Activity-specific config (questions, game rules, etc.)
  styling       Json      @default("{}") // Override program branding
  
  // AI Generation
  aiGenerated   Boolean   @default(false)
  aiPrompt      String?   // Original prompt used to generate
  
  // Status
  status        ActivityStatus @default(DRAFT)
  publishedAt   DateTime?
  archivedAt    DateTime?
  
  // Points & Rewards
  pointsValue   Int       @default(0)
  actionTitle   String    // For Perk API
  completionLimit Int     @default(1) // How many times can complete
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  sessions      Session[]
  completions   Completion[]
  analytics     Analytics[]
  
  @@unique([programId, slug])
  @@index([programId, status])
  @@index([type])
}

enum ActivityType {
  QUIZ
  SURVEY
  GAME
  DEMO
  CUSTOM
}

enum ActivityStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// ============ SESSIONS ============
model Session {
  id            String    @id @default(cuid())
  programId     String
  program       Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  activityId    String
  activity      Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  // User identification
  perkUserId    String    // Perk participant ID
  jwt           String?   // JWT token if used
  
  // Session data
  startedAt     DateTime  @default(now())
  expiresAt     DateTime
  completedAt   DateTime?
  
  // Progress tracking
  progress      Json      @default("{}") // Current state
  score         Int?
  
  // Relations
  completion    Completion?
  
  @@index([programId, perkUserId])
  @@index([activityId, perkUserId])
  @@index([expiresAt])
}

// ============ COMPLETIONS ============
model Completion {
  id            String    @id @default(cuid())
  sessionId     String    @unique
  session       Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  activityId    String
  activity      Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  // Results
  perkUserId    String
  score         Int?
  answers       Json?     // Quiz/survey answers
  data          Json?     // Other completion data
  
  // Points awarded
  pointsAwarded Int
  perkApiResponse Json?   // Response from Perk API
  
  // Timestamps
  completedAt   DateTime  @default(now())
  
  // Prevent duplicates
  @@unique([activityId, perkUserId, completedAt])
  @@index([perkUserId])
}

// ============ ANALYTICS ============
model Analytics {
  id            String    @id @default(uuid())
  programId     String
  program       Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  activityId    String?
  activity      Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  // Event data
  event         String    // "view", "start", "complete", "abandon", etc.
  perkUserId    String?
  metadata      Json?
  
  // Timestamps
  timestamp     DateTime  @default(now())
  
  @@index([programId, event, timestamp])
  @@index([activityId, event, timestamp])
}

// ============ USAGE TRACKING ============
model ProgramUsage {
  id            String    @id @default(cuid())
  programId     String
  program       Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  
  // Monthly aggregates
  month         DateTime  // First day of month
  views         Int       @default(0)
  starts        Int       @default(0)
  completions   Int       @default(0)
  pointsAwarded Int       @default(0)
  
  @@unique([programId, month])
  @@index([month])
}

// ============ ADMIN USERS ============
model AdminUser {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  role          AdminRole @default(ADMIN)
  
  // Auth
  passwordHash  String?   // Optional if using SSO
  
  // Status
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  auditLogs     AuditLog[]
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  CONTENT_CREATOR
  VIEWER
}

// ============ AUDIT LOG ============
model AuditLog {
  id            String    @id @default(cuid())
  adminUserId   String
  adminUser     AdminUser @relation(fields: [adminUserId], references: [id])
  
  action        String    // "create_program", "publish_activity", etc.
  entityType    String    // "program", "activity", etc.
  entityId      String
  changes       Json?     // What changed
  
  timestamp     DateTime  @default(now())
  
  @@index([entityType, entityId])
  @@index([adminUserId, timestamp])
}